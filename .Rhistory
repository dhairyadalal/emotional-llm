is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == "happiness")
)
regression_sadness <- lm(
is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == "sadness")
)
regression_surprise <- lm(
is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == "surprise")
)
summary(regression_anger)
summary(regression_fear)
regression_anger <- lm(
is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == 'anger')
)
regression_fearr <- lm(
is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == 'fear')
)
regression_happiness <- lm(
is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == "happiness")
)
regression_sadness <- lm(
is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == "sadness")
)
regression_surprise <- lm(
is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == "surprise")
)
# View the summaries of each regression
summary(regression_anger)
summary(regression_fear)
regression_anger <- lm(
is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == 'anger')
)
regression_fear <- lm(
is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == 'fear')
)
regression_happiness <- lm(
is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == "happiness")
)
regression_sadness <- lm(
is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == "sadness")
)
regression_surprise <- lm(
is_correct ~ wellbeing + self_control + emotionality + sociability,
data = data %>% filter(ekman == "surprise")
)
# View the summaries of each regression
summary(regression_anger)
summary(regression_fear)
summary(regression_happiness)
summary(regression_sadness)
summary(regression_surprise)
library(broom)
regression_results <- bind_rows(
tidy(regression_anger) %>% mutate(emotion = "Anger"),
tidy(regression_fear) %>% mutate(emotion = "Fear"),
tidy(regression_happiness) %>% mutate(emotion = "Happiness"),
tidy(regression_sadness) %>% mutate(emotion = "Sadness"),
tidy(regression_surprise) %>% mutate(emotion = "Surprise")
)
ggplot(regression_results %>% filter(term != "(Intercept)"), aes(x = term, y = estimate, color = emotion)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error), width = 0.2) +
facet_wrap(~ emotion, scales = "free_y") +
theme_minimal() +
labs(title = "Coefficient Estimates for Each Emotion",
x = "Trait-based Factors",
y = "Coefficient Estimate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(regression_results %>% filter(term != "(Intercept)"), aes(x = term, y = estimate, color = emotion)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error), width = 0.2) +
facet_wrap(~ emotion, scales = "free_y", nrow=1) +
theme_minimal() +
labs(title = "Coefficient Estimates for Each Emotion",
x = "Trait-based Factors",
y = "Coefficient Estimate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(regression_results %>% filter(term != "(Intercept)"), aes(x = term, y = estimate, color = emotion)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error), width = 0.2) +
facet_wrap(~ emotion, scales = "free_y", nrow=1) +
theme_classic() +
labs(title = "Coefficient Estimates for Each Emotion",
x = "Trait-based Factors",
y = "Coefficient Estimate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(regression_results %>% filter(term != "(Intercept)"), aes(x = term, y = estimate, color = emotion)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error), width = 0.2) +
facet_wrap(~ emotion, scales = "free_y", nrow=2) +
theme_classic() +
labs(title = "Coefficient Estimates for Each Emotion",
x = "Trait-based Factors",
y = "Coefficient Estimate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
regression_results
regression_results.dropna()
na.omit(regression_results)
ggplot(regression_results %>% filter(term != "(Intercept)"), aes(x = term, y = estimate, color = emotion)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error), width = 0.2) +
facet_wrap(~ emotion, scales = "free_y", nrow=2) +
theme_classic() +
labs(title = "Coefficient Estimates for Each Emotion",
x = "Trait-based Factors",
y = "Coefficient Estimate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = colors) +
theme(axis.title=element_text(size=20),
axis.text=element_text(size=20),
legend.text=element_text(size=15),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5))
ggplot(regression_results %>% filter(term != "(Intercept)"), aes(x = term, y = estimate, color = emotion)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error), width = 0.2) +
facet_wrap(~ emotion, scales = "free_y", nrow=2) +
theme_classic() +
labs(title = "Coefficient Estimates for Each Emotion",
x = "Trait-based Factors",
y = "Coefficient Estimate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(axis.title=element_text(size=20),
axis.text=element_text(size=20),
legend.text=element_text(size=15),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5))
ggplot(regression_results %>% filter(term != "(Intercept)"), aes(x = term, y = estimate, color = emotion)) +
geom_point(size = 5) +
geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error), width = 0.2) +
facet_wrap(~ emotion, scales = "free_y", nrow=2) +
theme_classic() +
labs(title = "Coefficient Estimates for Each Emotion",
x = "Trait-based Factors",
y = "Coefficient Estimate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(axis.title=element_text(size=20),
axis.text=element_text(size=20),
legend.text=element_text(size=15),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5))
regression_results <- bind_rows(
tidy(regression_anger) %>% mutate(emotion = "Anger"),
tidy(regression_fear) %>% mutate(emotion = "Fear"),
tidy(regression_happiness) %>% mutate(emotion = "Happiness"),
tidy(regression_sadness) %>% mutate(emotion = "Sadness"),
tidy(regression_surprise) %>% mutate(emotion = "Surprise")
) %>% na.omit()
ggplot(regression_results %>% filter(term != "(Intercept)"), aes(x = term, y = estimate, color = emotion)) +
geom_point(size = 5) +
geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error), width = 0.2) +
facet_wrap(~ emotion, scales = "free_y", nrow=2) +
theme_classic() +
labs(title = "Coefficient Estimates for Each Emotion",
x = "Trait-based Factors",
y = "Coefficient Estimate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(axis.title=element_text(size=15),
axis.text=element_text(size=15),
legend.text=element_text(size=15),
legend.position = "none",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5))
ggplot(regression_results %>% filter(term != "(Intercept)"), aes(x = term, y = estimate, color = emotion)) +
geom_point(size = 5) +
geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error), width = 0.2) +
facet_wrap(~ emotion, scales = "free_y", nrow=2) +
theme_classic() +
labs(title = "Coefficient Estimates for Each Emotion",
x = "Trait-based Factors",
y = "Coefficient Estimate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(
plot.title = element_text(size=15),
axis.title=element_text(size=15),
axis.text=element_text(size=15),
legend.text=element_text(size=15),
legend.position = "none",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5))
ggplot(regression_results %>% filter(term != "(Intercept)"), aes(x = term, y = estimate, color = emotion)) +
geom_point(size = 5) +
geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error), width = 0.2) +
facet_wrap(~ emotion, scales = "free_y", nrow=2) +
theme_classic() +
labs(title = "",
x = "Trait-based Factors",
y = "Coefficient Estimate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(
axis.title=element_text(size=15),
axis.text=element_text(size=15),
legend.text=element_text(size=15),
legend.position = "none",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5))
data <- data.frame(
emotion = c("anger", "disgust", "fear", "happiness", "sadness", "surprise"),
Gemma = c(0.3, 0, 0.33, 0.866, 0.571, 0.666),
GPT4 = c(0.7, 1, 0.5, 0.933, 0.857, 0.666),
Llama = c(0.4, 0, 0.5, 0.866, 0.571, 0.666),
Mixtral = c(0.3, 1, 0.33, 0.8, 0.429, 0.666)
)
# Reshape the data into a long format
long_data <- melt(data, id.vars = "emotion", variable.name = "Model", value.name = "Score")
# Create the grouped bar chart
ggplot(long_data, aes(x = emotion, y = Score, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +   # Creates grouped bar chart
theme_minimal() +
labs(title = "Emotional Scores by Model",
x = "Emotions",
y = "Score") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotates x-axis labels
data <- data.frame(
emotion = c("anger", "disgust", "fear", "happiness", "sadness", "surprise"),
Gemma = c(0.3, 0, 0.33, 0.866, 0.571, 0.666),
GPT4 = c(0.7, 1, 0.5, 0.933, 0.857, 0.666),
Llama = c(0.4, 0, 0.5, 0.866, 0.571, 0.666),
Mixtral = c(0.3, 1, 0.33, 0.8, 0.429, 0.666)
)
View(data)
data <- read.csv("results/regression-data.csv")
data
data <- data.frame(
emotion = c("anger", "disgust", "fear", "happiness", "sadness", "surprise"),
Gemma = c(0.3, 0.1, 0.33, 0.866, 0.571, 0.666),
GPT4 = c(0.7, 1, 0.5, 0.933, 0.857, 0.666),
Llama = c(0.4, 0.1, 0.5, 0.866, 0.571, 0.666),
Mixtral = c(0.3, 1, 0.33, 0.8, 0.429, 0.666)
)
# Reshape the data into a long format
long_data <- melt(data, id.vars = "emotion", variable.name = "Model", value.name = "Score")
# Create the grouped bar chart
ggplot(long_data, aes(x = emotion, y = Score, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +   # Creates grouped bar chart
theme_minimal() +
labs(title = "Emotional Scores by Model",
x = "Emotions",
y = "Score") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotates x-axis labels
ggplot(long_data, aes(x = emotion, y = Score, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +   # Creates grouped bar chart
theme_minimal() +
labs(title = "Emotional Scores by Model",
x = "Emotions",
y = "`Accuracy") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotates x-axis labels
ggplot(long_data, aes(x = emotion, y = Score, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +   # Creates grouped bar chart
theme_classic() +
labs(title = "Emotional Scores by Model",
x = "Emotions",
y = "`Accuracy") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotates x-axis labels
ggplot(long_data, aes(x = emotion, y = Score, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +   # Creates grouped bar chart
theme_classic() +
labs(title = "",
x = "Emotions",
y = "`Accuracy") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(axis.title=element_text(size=20),
axis.text=element_text(size=20),
legend.text=element_text(size=15),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=20))
ggplot(long_data, aes(x = emotion, y = Score, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +   # Creates grouped bar chart
theme_classic() +
labs(title = "Test",
x = "Emotions",
y = "`Accuracy") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(axis.title=element_text(size=20),
axis.text=element_text(size=20),
legend.text=element_text(size=15),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=20))
ggplot(long_data, aes(x = emotion, y = Score, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +   # Creates grouped bar chart
theme_classic() +
labs(title = "Emotional Situation Awareness",
x = "Emotions",
y = "`Accuracy") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(axis.title=element_text(size=20),
axis.text=element_text(size=20),
legend.text=element_text(size=15),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=20))
ggplot(long_data, aes(x = emotion, y = Score, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +   # Creates grouped bar chart
theme_classic() +
labs(title = "Emotional Situation Awareness",
x = "",
y = "`Accuracy") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(axis.title=element_text(size=20),
axis.text=element_text(size=20),
legend.text=element_text(size=15),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=20))
View(happiness)
setwd("~/Documents/research/emotional-llm")
df <- read.csv("analysis/confusion-tabel-raw.csv")
ls
ls()
pwd
df <- read.csv("analysis/confusion-table-raw.csv")
df <- read.csv("results/analysis/confusion-table-raw.csv")
View(df)
confusion_matrix <- table(df$pred, df$answer)
# Convert the confusion matrix into a format suitable for ggplot2 (long format)
confusion_matrix_melted <- melt(confusion_matrix)
# Rename the columns for better clarity
colnames(confusion_matrix_melted) <- c("Prediction", "Actual", "Count")
# Plot the confusion matrix using ggplot2
ggplot(confusion_matrix_melted, aes(x = Actual, y = Prediction, fill = Count)) +
geom_tile() +
geom_text(aes(label = Count), color = "white", size = 5) +  # Add text labels for the counts
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient
labs(title = "Confusion Matrix", x = "Actual Label", y = "Predicted Label") +
theme_minimal()
ggplot(confusion_matrix_melted, aes(x = Actual, y = Prediction, fill = Count)) +
geom_tile() +
geom_text(aes(label = Count), color = "white", size = 5) +  # Add text labels for the counts
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient
labs(title = "Confusion Matrix", x = "Actual Label", y = "Predicted Label") +
theme_classic()
ggplot(confusion_matrix_melted, aes(x = Actual, y = Prediction, fill = Count)) +
geom_tile() +
geom_text(aes(label = Count), color = "white", size = 5) +  # Add text labels for the counts
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient
labs(title = "Confusion Matrix", x = "Actual Label", y = "Predicted Label")
ggplot(confusion_matrix_melted, aes(x = Actual, y = Prediction, fill = Count)) +
geom_tile() +
geom_text(aes(label = Count), color = "white", size = 5) +  # Add text labels for the counts
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient
labs(title = "Confusion Matrix", x = "Actual Label", y = "Predicted Label") +
theme_bw()
data <- read.csv("results/analysis/confusion-table-raw.csv")
emotion_labels <- c("Sad", "Pride", "Relief", "Joy", "Gratitude", "Distressed",
"Hope", "Contempt", "Frustrated", "Scared", "Dislike", "Angry")
# Create the confusion matrix, specifying the full set of labels
confusion_matrix <- table(factor(data$pred, levels = emotion_labels),
factor(data$answer, levels = emotion_labels))
# Convert the confusion matrix into a format suitable for ggplot2 (long format)
confusion_matrix_melted <- melt(confusion_matrix)
# Rename the columns for better clarity
colnames(confusion_matrix_melted) <- c("Prediction", "Actual", "Count")
# Plot the confusion matrix using ggplot2 with grid lines
ggplot(confusion_matrix_melted, aes(x = Actual, y = Prediction, fill = Count)) +
geom_tile(color = "black", size = 0.5) +  # Add borders to each tile
geom_text(aes(label = Count), color = "white", size = 5) +  # Add text labels for the counts
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient
labs(title = "Confusion Matrix", x = "Actual Label", y = "Predicted Label") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "grey", size = 0.5),  # Major grid lines
panel.grid.minor = element_line(color = "lightgrey", size = 0.25),  # Minor grid lines
panel.grid.major.x = element_blank(),  # Disable vertical grid lines (optional)
panel.grid.major.y = element_blank()   # Disable horizontal grid lines (optional)
)
emotion_labels <- c("Sad", "Pride", "Relief", "Joy", "Gratitude", "Distressed",
"Hope", "Contempt", "Frustrated", "Scared", "Dislike", "Angry")
# Create the confusion matrix, specifying the full set of labels
confusion_matrix <- table(factor(data$pred, levels = emotion_labels),
factor(data$answer, levels = emotion_labels))
# Convert the confusion matrix into a format suitable for ggplot2 (long format)
confusion_matrix_melted <- melt(confusion_matrix)
# Rename the columns for better clarity
colnames(confusion_matrix_melted) <- c("Actual", "Prediction", "Count")
# Plot the confusion matrix with swapped axes, grey for zero counts, and a readable color scheme
ggplot(confusion_matrix_melted, aes(x = Prediction, y = Actual, fill = Count)) +
geom_tile(aes(fill = ifelse(Count == 0, "Zero", Count)), color = "black", size = 0.5) +  # Swap axes and conditionally color zero counts
geom_text(aes(label = Count), color = "white", size = 5) +  # Add text labels for the counts
scale_fill_manual(values = c("Zero" = "lightgrey", "1" = "#D4E157", "2" = "#4CAF50", "3" = "#388E3C", "4" = "#1B5E20"),
name = "Count") +  # Custom color scheme, with grey for zero counts
labs(title = "Confusion Matrix", x = "Predicted Label", y = "Actual Label") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "grey", size = 0.5),  # Major grid lines
panel.grid.minor = element_blank(),  # No minor grid lines
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
axis.text.y = element_text(angle = 0)  # Keep y-axis labels horizontal
)
emotion_labels <- c("Sad", "Pride", "Relief", "Joy", "Gratitude", "Distressed",
"Hope", "Contempt", "Frustrated", "Scared", "Dislike", "Angry")
# Create the confusion matrix, specifying the full set of labels
confusion_matrix <- table(factor(data$pred, levels = emotion_labels),
factor(data$answer, levels = emotion_labels))
# Convert the confusion matrix into a format suitable for ggplot2 (long format)
confusion_matrix_melted <- melt(confusion_matrix)
# Rename the columns for better clarity
colnames(confusion_matrix_melted) <- c("Actual", "Prediction", "Count")
# Plot the confusion matrix with continuous color scale and special treatment for zero counts
ggplot(confusion_matrix_melted, aes(x = Prediction, y = Actual, fill = Count)) +
geom_tile(aes(fill = Count), color = "black", size = 0.5) +  # Swap axes and apply continuous fill
geom_text(aes(label = Count), color = "white", size = 5) +  # Add text labels for the counts
scale_fill_gradientn(colors = c("lightgrey", "#D4E157", "#4CAF50", "#388E3C", "#1B5E20"),
na.value = "lightgrey", limits = c(0, max(confusion_matrix_melted$Count))) +  # Color gradient for counts
labs(title = "Confusion Matrix", x = "Predicted Label", y = "Actual Label") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "grey", size = 0.5),  # Major grid lines
panel.grid.minor = element_blank(),  # No minor grid lines
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
axis.text.y = element_text(angle = 0)  # Keep y-axis labels horizontal
)
eatment for zero counts
data <- data.frame(
emotion = c("anger", "disgust", "fear", "happiness", "sadness", "surprise"),
Gemma = c(0.3, 0.1, 0.33, 0.866, 0.571, 0.666),
GPT4 = c(0.7, 1, 0.5, 0.933, 0.857, 0.666),
Llama = c(0.4, 0.1, 0.5, 0.866, 0.571, 0.666),
Mixtral = c(0.3, 1, 0.33, 0.8, 0.429, 0.666)
)
# Reshape the data into a long format
long_data <- melt(data, id.vars = "emotion", variable.name = "Model", value.name = "Score")
# Create the grouped bar chart
ggplot(long_data, aes(x = emotion, y = Score, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +   # Creates grouped bar chart
theme_classic() +
labs(title = "Emotional Situation Awareness",
x = "",
y = "`Accuracy") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(axis.title=element_text(size=20),
axis.text=element_text(size=20),
legend.text=element_text(size=15),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=20))
data$Model <- factor(data$Model, levels = c("Human", "GPT4o", "Gemma-2", "Llama-3.1", "Mixtral"))
data <- data.frame(
Model = rep(c("Human", "Gemma-2", "Mixtral", "Llama-3.1", "GPT4o"), each = 4),
Trait = rep(c("Wellbeing", "Self-Control", "Emotionality", "Sociability"), times = 5),
Mean = c(5.235, 4.475, 5.025, 4.905, 4.67, 4.5, 4.62, 4.67, 4.83, 3.83, 3.5, 3.67,
4.83, 3.33, 3.0, 3.67, 4.33, 4.33, 4.0, 4.83),
SDev = c(0.83, 0.75, 0.71, 0.74, 2.16, 1.38, 1.6, 1.03, 2.99, 2.04, 1.69, 1.86,
2.32, 1.51, 1.77, 1.86, 1.86, 0.82, 1.2, 0.98)
)
View(df)
View(data)
table(data)
data <- data.frame(
Model = rep(c("Human", "Gemma-2", "Mixtral", "Llama-3.1", "GPT4o"), each = 4),
Trait = rep(c("Wellbeing", "Self-Control", "Emotionality", "Sociability"), times = 5),
Mean = c(5.235, 4.475, 5.025, 4.905, 4.67, 4.5, 4.62, 4.67, 4.83, 3.83, 3.5, 3.67,
4.83, 3.33, 3.0, 3.67, 4.33, 4.33, 4.0, 4.83),
SDev = c(0.83, 0.75, 0.71, 0.74, 2.16, 1.38, 1.6, 1.03, 2.99, 2.04, 1.69, 1.86,
2.32, 1.51, 1.77, 1.86, 1.86, 0.82, 1.2, 0.98)
)
# Reorder Model factor levels
data$Model <- factor(data$Model, levels = c("Human", "GPT4o", "Gemma-2", "Llama-3.1", "Mixtral"))
# Choose a color palette
colors <- brewer.pal(n = length(unique(data$Model)), name = "Set2")
ggplot(data, aes(x = Trait, y = Mean, color = Model)) +
geom_point(size = 5) +
coord_flip() +
theme_clean() +
labs(x = "Factor", y = "Score") +
scale_color_manual(values = colors) +
theme(axis.title=element_text(size=20),
axis.text=element_text(size=20),
legend.text=element_text(size=15),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5))
View(data)
data <- data.frame(
emotion = c("anger", "disgust", "fear", "happiness", "sadness", "surprise"),
Gemma = c(0.3, 0.1, 0.33, 0.866, 0.571, 0.666),
GPT4 = c(0.7, 1, 0.5, 0.933, 0.857, 0.666),
Llama = c(0.4, 0.1, 0.5, 0.866, 0.571, 0.666),
Mixtral = c(0.3, 1, 0.33, 0.8, 0.429, 0.666)
)
# Reshape the data into a long format
long_data <- melt(data, id.vars = "emotion", variable.name = "Model", value.name = "Score")
# Create the grouped bar chart
ggplot(long_data, aes(x = emotion, y = Score, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +   # Creates grouped bar chart
theme_classic() +
labs(title = "Emotional Situation Awareness",
x = "",
y = "`Accuracy") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(axis.title=element_text(size=20),
axis.text=element_text(size=20),
legend.text=element_text(size=15),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=20))
View(data)
